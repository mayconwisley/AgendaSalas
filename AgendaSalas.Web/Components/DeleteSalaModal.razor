@inject IRoomService roomService

<div class="modal fade" id="deletarSala-@RoomId" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <EditForm Model="@RoomDto" OnValidSubmit="@Delete">
                <InputNumber hidden @bind-Value="RoomDto!.Id" />
                <DataAnnotationsValidator />

                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="staticBackdropLabel">Excluir Room</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">

                    <div class="row g-3">
                        <div class="col-12">
                            <p>Room: @RoomDto.Name</p>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fechar</button>
                    <button type="submit" class="btn btn-danger" data-bs-dismiss="modal">Excluir</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Action? DataUpdated { get; set; }

    private RoomDto? RoomDto { get; set; } = new();

    [Parameter]
    public int RoomId { get; set; }


    protected override async Task OnInitializedAsync()
    {
        RoomDto = await roomService.GetById(RoomId);
        await base.OnInitializedAsync();
    }

    private async Task Delete()
    {
        if (RoomDto is not null)
        {
            var room = await roomService.Delete(RoomId);
            UpdateData();
        }
    }

    private void UpdateData()
    {
        DataUpdated?.Invoke();
    }
}
