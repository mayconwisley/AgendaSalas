@inject ISalaService salaService

<div class="modal fade" id="editarSala-@SalaId" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <EditForm Model="@salaDto" OnValidSubmit="@Edit">
                <InputNumber hidden @bind-Value="salaDto!.Id" />
                <DataAnnotationsValidator />

                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="staticBackdropLabel">Editar Sala</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">

                    <div class="row g-3">
                        <div class="col-6">
                            <label for="inNome" class="form-label">Nome</label>
                            <InputText class="form-control" id="inNome" @bind-Value="salaDto!.Nome" placeholder="Nome" />
                            <ValidationMessage For="@(() => salaDto.Nome)" />

                        </div>
                        <div class="col-6">

                            <label for="inRamal" class="form-label">Ramal</label>
                            <InputText class="form-control" id="inRamal" @bind-Value="salaDto!.Ramal" placeholder="Ramal" />
                        </div>
                        <div class="col-12">
                            <label for="inDescricao" class="form-label">Descrição</label>
                            <InputText class="form-control" id="inDescricao" @bind-Value="salaDto!.Descricao" placeholder="Descrição" />
                        </div>
                    </div>

                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-primary" data-bs-dismiss="modal">Salvar</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Action? DataAtualizados { get; set; }

    private SalaDto? salaDto { get; set; } = new();

    [Parameter]
    public int SalaId { get; set; }


    protected override async Task OnInitializedAsync()
    {
        salaDto = await salaService.GetById(SalaId);
    }

    private async Task Edit()
    {
        if (salaDto is not null)
        {
            var sala = await salaService.Update(salaDto);
            UpdateDados();
        }
    }

    private void UpdateDados()
    {
        DataAtualizados?.Invoke();
    }
}
