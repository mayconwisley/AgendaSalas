@{
    DateTime dataInicioMes = new DateTime(competencia.Year, competencia.Month, 1);
    DateTime dataFimMes = new DateTime(competencia.Year, competencia.Month, DateTime.DaysInMonth(competencia.Year, competencia.Month));
}
@inject IAgendaService agendaService

<div class="calendario">
    <div class="desc-mes">

        <nav>
            <ul class="pagination">
                <li class="page-item">
                    <button class="page-link" @onclick="AnteriorMes">
                        <span aria-hidden="true">&laquo;</span>
                    </button>
                </li>
                <li class="page-item nome-mes"> <p class="page-link">@competencia.ToString("MMMM/yyyy")</p></li>
                <li class="page-item">
                    <button class="page-link" @onclick="ProximoMes">
                        <span aria-hidden="true">&raquo;</span>
                    </button>
                </li>
            </ul>
        </nav>
    </div>
    <div class="dia-semana">
        <span>Domingo</span>
        <span>Segunda-feira</span>
        <span>Terça-feira</span>
        <span>Quarta-feira</span>
        <span>Quinta-feira</span>
        <span>Sexta-feira</span>
        <span>Sábado</span>
    </div>

    <div class="dia-mes">
        @for (int i = 0; i < dataFimMes.Day; i++)
        {
            int numSemana = ((int)dataInicioMes.AddDays(i).DayOfWeek);
            @if (@dataInicioMes.AddDays(i).Day == 1)
            {
                @for (int y = 0; y < numSemana; y++)
                {
                    <span class="vazio"></span>
                }
            }
            <span class="@(numSemana == 0 ? "domingo dia" : (numSemana == 6 ? "sabado dia" : (dataInicioMes.AddDays(i).Date == DateTime.Now.Date ? "dia-atual dia" : "dia" )))">
                <a href="#InsertAgenda/@(dataInicioMes.AddDays(i).Date.ToString("dd-MM-yyyy"))">
                    @dataInicioMes.AddDays(i).Day
                </a>
                @if (agendaDto is not null)
                {
                    var salaAgenda = agendaDto
                    .GroupBy(g => new
                    {
                        g.SalaId,
                        g.Sala,
                        g.DataFinal.Date
                    })
                    .Select(s => new AgendaDto
                    {
                        SalaId = s.Key.SalaId,
                        Sala = s.Key.Sala,
                        DataFinal = s.Key.Date
                    })
                    .ToList();

                    @foreach (var item in salaAgenda)
                    {
                        if (item.DataFinal.Date == dataInicioMes.AddDays(i).Date)
                        {
                            <a href="#InforcaoAgenda/@(item.SalaId)/@(dataInicioMes.AddDays(i).Date.ToString("dd-MM-yyyy"))">@item.Sala</a>
                        }
                    }
                }
            </span>
        }
    </div>

</div>

@code {

    [Parameter]
    public int quantidadeSalas { get; set; }
    DateTime competencia = DateTime.Now.Date;

    public IEnumerable<AgendaDto>? agendaDto { get; set; } = new List<AgendaDto>();

    int ultimoDiaMes;
    string? informacaoAgendaDia;


    protected override async Task OnInitializedAsync()
    {
        agendaDto = await agendaService.GetByDate();

        await base.OnInitializedAsync();
    }

    private void ProximoMes()
    {
        DateTime competenciaAdd = competencia.AddMonths(1);
        competencia = competenciaAdd;

    }
    private void AnteriorMes()
    {
        DateTime competenciaRemove = competencia.AddMonths(-1);
        competencia = competenciaRemove;
    }
}
