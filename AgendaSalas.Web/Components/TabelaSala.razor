@inject ISalaService salaService

<div class="border mt-2">
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Id</th>
                <th>Nome</th>
                <th>Ramal</th>
                <th>Descrição</th>
                <th>Ações</th>
            </tr>
        </thead>
        <tbody>
            @if (salaView is not null)
            {
                var salas = salaView.SalasDto;

                if (salas is not null)
                {
                    @foreach (var sala in salas)
                    {
                        <tr>
                            <td>@sala.Id</td>
                            <td>@sala.Nome</td>
                            <td>@sala.Ramal</td>
                            <td>@sala.Descricao</td>
                            <td>
                                <button data-bs-toggle="modal" data-bs-target="#editarSala-@sala.Id" class="btn btn-info">
                                    Editar
                                </button>
                                <EditSalaModal SalaId="@sala.Id" DataAtualizados="@(() => DadosAtualzados())" />
                                <button data-bs-toggle="modal" data-bs-target="#deletarSala-@sala.Id" class="btn btn-danger">
                                    Excluir
                                </button>
                                <DeleteSalaModal SalaId="@sala.Id" DataAtualizados="@(() => DadosAtualzados())" />
                            </td>
                        </tr>

                    }
                }
            }

        </tbody>
    </table>
</div>

@code {
    [Parameter]
    public SalaView? salaView { get; set; }
    private async void DadosAtualzados()
    {
        salaView = await salaService.GetAll();
        StateHasChanged();
    }
}