@page "/ScheduleUserCreate/{ScheduleId}"

@inject IScheduleUserService scheduleUserService
@inject IUserService userService
@inject IClientService clientService
@inject NavigationManager navigationManager


<h1>Adicionar Colaborador na Agenda</h1>
<EditForm Model="@ScheduleUserCreateDto" OnValidSubmit="@Create">
    <DataAnnotationsValidator />
    <div class="row g-3">
        <div class="col-9">
            <label for="inClient" class="form-label">Colaborador</label>
            <InputSelect class="form-select" id="inClient" @bind-Value="ScheduleUserCreateDto!.UserId">
                @if (ClientView?.ClientsDto is not null)
                {
                    <option value="0">Selecione uma Opção</option>
                    @foreach (var client in ClientView.ClientsDto)
                    {
                        <option value="@client.Id"> @client.Name</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(() => ScheduleUserCreateDto.UserId)" />
        </div>
        <div class="col-3">
            <button type="button" @onclick="@AddUser" data-bs-dismiss="modal" class="btn btn-primary">Adicionar</button>
        </div>
    </div>

    <button type="submit" data-bs-dismiss="modal" class="btn btn-primary">Salvar</button>
    <NavLink href="Schedule" class="btn btn-primary">Voltar</NavLink>
</EditForm>


@code {
    [Parameter]
    public Action? DataUpdated { get; set; }
    [Parameter]
    public EventCallback<string> ErroRetornado { get; set; }
    [Parameter]
    public string ScheduleId { get; set; } = string.Empty;


    private ScheduleUserCreateDto? ScheduleUserCreateDto { get; set; }
    private UserView? UserView { get; set; } = new();
    private ClientView? ClientView { get; set; } = new();
    private List<int> UserIdList = [];


    protected override async Task OnInitializedAsync()
    {
        ScheduleUserCreateDto = new();
        UserView = await userService.GetAll();
        ClientView = await clientService.GetAll();
        await base.OnInitializedAsync();
    }

    private async Task AddUser()
    {
        UserIdList.Add(ScheduleUserCreateDto!.UserId);

    }

    private async Task Create()
    {
        if (ScheduleUserCreateDto is not null)
        {
            try
            {
                foreach (var item in UserIdList)
                {
                    ScheduleUserCreateDto = new()
                        {
                            UserId = item,
                            ScheduleId = int.Parse(ScheduleId)

                        };
                    await scheduleUserService.Create(ScheduleUserCreateDto);
                }


                UpdateData();
                ScheduleUserCreateDto = new();
            }
            catch (Exception ex)
            {
                await Error(ex.Message);
                ScheduleUserCreateDto = new();
            }
        }
        navigationManager.NavigateTo("/Schedule");
        StateHasChanged();
    }

    private void UpdateData()
    {
        DataUpdated?.Invoke();
    }



    private async Task Error(string error)
    {
        await ErroRetornado.InvokeAsync(error);
    }
}
