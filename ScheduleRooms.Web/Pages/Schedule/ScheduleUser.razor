@page "/Schedule"
@layout NewLayout

@inject IScheduleUserService scheduleUserService
@inject IUserService userService

<h3>Cadastro Agenda do Colaborador</h3>
<NavLink href="ScheduleCreate" class="btn btn-info">
    Nova Agenda
</NavLink>

@if (scheduleUserView is null)
{
    <div class="spinner-border" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}
else
{

    <MensageError Message="@Message" ShowMessage="@ShowMessage" Key="@MessageKey" />
    <TableSchedule ScheduleUserView="scheduleUserView" />

    <PaginationTable PageCurrent="@ReceberPagina"
                     TotalData="@scheduleUserView.TotalData"
                     Page="@scheduleUserView.Page"
                     TotalPage="@scheduleUserView.TotalPage" />

    
}

@code {
    private ScheduleUserView? scheduleUserView;
    private UserView? userViewManager;
    private string? Message { get; set; }
    private int MessageKey { get; set; } = 0;
    public string? ShowMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        scheduleUserView = await scheduleUserService.GetAll();
        userViewManager = await userService.GetManagerAll();
    }
    private async void DataUpdated()
    {
        scheduleUserView = await scheduleUserService.GetAll();
        userViewManager = await userService.GetManagerAll();
        StateHasChanged();
    }
    private async Task ReceberPagina(int pageCurrent)
    {
        scheduleUserView = await scheduleUserService.GetAll(pageCurrent);
    }
    private async Task ReceiveError(string message)
    {
        Message = await Task.FromResult(message);

        if (message is not null)
        {
            ShowMessage = "";
        }
        else
        {
            ShowMessage = "d-none";
        }
        MessageKey++;
        StateHasChanged();
    }
}
