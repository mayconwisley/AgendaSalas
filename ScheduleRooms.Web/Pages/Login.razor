@page "/Login"
@inject ITokenStorageService tokenStorageService
@inject NavigationManager navigationManager
<div class="page">
    <EditForm Model="@LoginDto" class="formLogin" OnValidSubmit="Log_in">
        <DataAnnotationsValidator />
        <h2>Login</h2>
        <InputText @bind-Value="LoginDto!.Username" type="text" placeholder="Usuário" />
        <InputText @bind-Value="LoginDto!.Password" type="password" placeholder="Senha" />
        <button type="submit">Entrar</button>
    </EditForm>
</div>

@code {
    private LoginDto? LoginDto { get; set; } = new();
    private TokenDto? TokenDto { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var token = await tokenStorageService.GetToken(LoginDto);
            if (token.Bearer is null)
            {
                await tokenStorageService.RemoverToken();
            }

            if (token.Bearer is not null)
            {
                navigationManager.NavigateTo("/ScheduleUser", true);
            }
            await base.OnInitializedAsync();
        }
        catch (Exception)
        {
            throw;
        }
    }

    private async Task Log_in()
    {
        if (LoginDto is not null)
        {
            var token = await tokenStorageService.GetToken(LoginDto);

            if (token.Bearer is not null)
            {
                navigationManager.NavigateTo("/ScheduleUser", true);
            }
        }

    }
}
