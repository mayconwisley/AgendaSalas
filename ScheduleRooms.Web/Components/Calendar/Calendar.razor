@using System.Globalization
@{
    DateTime dateStartMonth = new DateTime(competence.Year, competence.Month, 1);
    DateTime dateEndMonth = new DateTime(competence.Year, competence.Month, DateTime.DaysInMonth(competence.Year, competence.Month));
}
@inject IScheduleRoomService scheduleRoomService
@inject IScheduleUserService scheculeUserService

@attribute [StreamRendering(true)]

<div class="teste">
    <div class="calendario">
        <div class="desc-mes">
            <div class="titulo">
                <p>Agenda JS Maringá</p>
            </div>

            <nav>
                <ul class="pagination">
                    <li class="page-room">
                        <button class="page-link pn-mes" @onclick="PreviousMonth">
                            <span aria-hidden="true">&laquo;</span>
                        </button>
                    </li>
                    <li class="page-room nome-mes">
                        <p class="page-link">@competence.ToString("MMMM/yyyy", new CultureInfo("pt-br"))</p>
                    </li>
                    <li class="page-room">
                        <button class="page-link pn-mes" @onclick="NextMonth">
                            <span aria-hidden="true">&raquo;</span>
                        </button>
                    </li>
                </ul>
            </nav>
            <div>
                <NavLink class="nav-link" href="Login" Match="NavLinkMatch.Prefix">Menu</NavLink>
            </div>

        </div>
        <div class="dia-semana">
            <span>Domingo</span>
            <span>Segunda-feira</span>
            <span>Terça-feira</span>
            <span>Quarta-feira</span>
            <span>Quinta-feira</span>
            <span>Sexta-feira</span>
            <span>Sábado</span>
        </div>
        <div class="centro-mes">
            <div class="dia-mes">
                @for (int i = 0; i < dateEndMonth.Day; i++)
                {
                    int numWeek = ((int)dateStartMonth.AddDays(i).DayOfWeek);
                    @if (@dateStartMonth.AddDays(i).Day == 1)
                    {
                        @for (int y = 0; y < numWeek; y++)
                        {
                            <span class="vazio"></span>
                        }
                    }
                    <span class="@(numWeek == 0 && dateStartMonth.AddDays(i).Date == DateTime.Now.Date ? "dia-atual dia" :
                                  (numWeek == 0 ? "domingo dia" :
                                  (numWeek == 6 && dateStartMonth.AddDays(i).Date == DateTime.Now.Date ? "dia-atual dia" :
                                  (numWeek == 6 ? "sabado dia" :
                                  (dateStartMonth.AddDays(i).Date == DateTime.Now.Date ? "dia-atual dia" :
                                  "dia" )))))">
                        <b>
                            @dateStartMonth.AddDays(i).Day
                        </b>

                        @if (ScheduleRoomDto is null)
                        {
                            <div class="spinner-border spinner-border-sm" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        }
                        else
                        {
                            var scheduleRooms = ScheduleRoomDto.GroupBy(g => new
                            {
                                g.RoomId,
                                g.Room,
                                g.DateStart.Date
                            }).Select(s => new ScheduleRoomDto
                            {
                                RoomId = s.Key.RoomId,
                                Room = s.Key.Room,
                                DateStart = s.Key.Date
                            })
                            .ToList()
                            .OrderBy(o => o.Room);

                            @foreach (var room in scheduleRooms)
                            {
                                if (room.DateStart.Date == dateStartMonth.AddDays(i).Date)
                                {

                                    <a href="#" data-bs-toggle="modal" data-bs-target="#tableScheduleRoom-@room.RoomId-@dateStartMonth.AddDays(i).Date.ToString("ddMMyyyy")">
                                        @room.Room
                                    </a>

                                    <TableScheduleRoomModal RoomId="@room.RoomId" DateSelected="@dateStartMonth.AddDays(i).Date" />
                                }
                            }
                        }

                        @if (ScheduleUserDto is null)
                        {
                            <div class="spinner-border spinner-border-sm" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        }
                        else
                        {
                            var scheduleUsers = ScheduleUserDto
                            .GroupBy(g => new
                            {
                                g.UserId,
                                g.User,
                                g.DateStart.Date

                            })
                            .Select(s => new ScheduleUserDto
                            {
                                UserId = s.Key.UserId,
                                User = s.Key.User,
                                DateStart = s.Key.Date

                            })
                            .ToList()
                            .OrderBy(o => o.User);

                            @foreach (var user in scheduleUsers)
                            {
                                if (user.DateStart.Date == dateStartMonth.AddDays(i).Date)
                                {
                                    <a href="#" data-bs-toggle="modal" data-bs-target="#tableScheduleUser-@user.UserId-@user.ClientId-@dateStartMonth.AddDays(i).Date.ToString("ddMMyyyy")">
                                        @user.User
                                    </a>
                                    {
                                        UserId = @user.UserId;
                                    }
                                    <TableScheduleUserModal UserId="@user.UserId" ClientId="@user.ClientId" DateSelected="@dateStartMonth.AddDays(i).Date" />
                                }
                            }
                        }
                    </span>
                }
            </div>
        </div>
    </div>
</div>


@code {

    DateTime competence = DateTime.Now.Date;

    public IEnumerable<ScheduleRoomDto>? ScheduleRoomDto { get; set; }
    public IEnumerable<ScheduleUserDto>? ScheduleUserDto { get; set; }

    private int UserId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ScheduleRoomDto = await scheduleRoomService.GetByAgendaActive();
        ScheduleUserDto = await scheculeUserService.GetByScheduleUser();

        await base.OnInitializedAsync();
    }

    private void NextMonth()
    {
        DateTime competenceAdd = competence.AddMonths(1);
        competence = competenceAdd;
    }
    private void PreviousMonth()
    {
        DateTime competenceRemove = competence.AddMonths(-1);
        competence = competenceRemove;
    }
}
