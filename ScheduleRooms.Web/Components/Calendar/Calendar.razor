@using System.Globalization
@{
    CultureInfo cultureInfo = new("pt-BR");
    DateTime dateStartMonth = new DateTime(competence.Year, competence.Month, 1);
    DateTime dateEndMonth = new DateTime(competence.Year, competence.Month, DateTime.DaysInMonth(competence.Year, competence.Month));
}

@inject IScheduleUserService scheculeUserService
<div class="teste">
    <div class="calendario">
        <div class="desc-mes">
            <div class="titulo">
                <p>Agenda JS Maringá</p>
            </div>
            <nav>
                <ul class="pagination">
                    <li class="page-room">
                        <button class="page-link pn-mes" @onclick="PreviousMonth">
                            <span aria-hidden="true">&laquo;</span>
                        </button>
                    </li>
                    <li class="page-room nome-mes">
                        <p class="page-link">@competence.ToString("MMMM/yyyy", cultureInfo)</p>
                    </li>
                    <li class="page-room">
                        <button class="page-link pn-mes" @onclick="NextMonth">
                            <span aria-hidden="true">&raquo;</span>
                        </button>
                    </li>
                </ul>
            </nav>
            <div>
                <NavLink class="nav-link" href="Login" Match="NavLinkMatch.Prefix">Menu</NavLink>
            </div>
        </div>
        <div class="dia-semana">
            <span>Domingo</span>
            <span>Segunda-feira</span>
            <span>Terça-feira</span>
            <span>Quarta-feira</span>
            <span>Quinta-feira</span>
            <span>Sexta-feira</span>
            <span>Sábado</span>
        </div>
        <div class="centro-mes">
            <div class="dia-mes">

                @for (int i = 0; i < dateEndMonth.Day; i++)
                {
                    int numWeek = ((int)dateStartMonth.AddDays(i).DayOfWeek);
                    DateTime currentDate = dateStartMonth.AddDays(i);

                    @if (@dateStartMonth.AddDays(i).Day == 1)
                    {
                        @for (int y = 0; y < numWeek; y++)
                        {
                            <span class="vazio"></span>
                        }
                    }
                    <span class="@(numWeek == 0 && dateStartMonth.AddDays(i).Date == DateTime.Now.Date ? "dia-atual dia" :
                                  (numWeek == 0 ? "domingo dia" :
                                  (numWeek == 6 && dateStartMonth.AddDays(i).Date == DateTime.Now.Date ? "dia-atual dia" :
                                  (numWeek == 6 ? "sabado dia" :
                                  (dateStartMonth.AddDays(i).Date == DateTime.Now.Date ? "dia-atual dia" :
                                  "dia" )))))">
                        <b>
                            @dateStartMonth.AddDays(i).Day
                        </b>

                        @if (!dailyScheduleData.ContainsKey(currentDate) || dailyScheduleData[currentDate] is null)
                        {
                            <div class="spinner-border spinner-border-sm" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        }
                        else
                        {
                            var scheduleUsers = dailyScheduleData[currentDate];
                            <CalendarUser ScheduleUserDtos="@scheduleUsers" CurrenteDate="@currentDate" />
                        }
                    </span>
                }
            </div>
        </div>
    </div>
</div>


@code {

    DateTime competence = DateTime.Now.Date;
    Dictionary<DateTime, IEnumerable<ScheduleUserDto>> dailyScheduleData = new Dictionary<DateTime, IEnumerable<ScheduleUserDto>>();

    protected override async Task OnInitializedAsync()
    {
        await LoadDataMonth(competence);
    }

    private async Task<IEnumerable<ScheduleUserDto>> LoadScheduleUserDtoDates(DateTime dateSchedule)
    {
        var scheduleUserDtos = await scheculeUserService.GetByScheduleUserDateStart(dateSchedule);

        return scheduleUserDtos
         .Where(w => w.ScheduleDto.DateStart.Date == dateSchedule.Date)
         .GroupBy(g => new
         {
             SchedulesId = g.ScheduleId,
             DateStart = g.ScheduleDto.DateStart
         })
         .Select(s => new ScheduleUserDto
             {
                 ScheduleId = s.Key.SchedulesId,
                 ScheduleDto = new()
                 {
                     DateStart = s.Key.DateStart
                 }
             })
             .ToList();
    }

    private async Task LoadDataMonth(DateTime competence)
    {
        DateTime dateStartMonth = new DateTime(competence.Year, competence.Month, 1);
        DateTime dateEndMonth = new DateTime(competence.Year, competence.Month, DateTime.DaysInMonth(competence.Year, competence.Month));

        for (int i = 0; i < dateEndMonth.Day; i++)
        {
            DateTime currentDate = dateStartMonth.AddDays(i);
            dailyScheduleData[currentDate] = await LoadScheduleUserDtoDates(currentDate);
        }
        StateHasChanged();
    }
    private async Task NextMonth()
    {
        DateTime competenceAdd = competence.AddMonths(1);
        competence = competenceAdd;
        await LoadDataMonth(competence);
    }
    private async Task PreviousMonth()
    {
        DateTime competenceRemove = competence.AddMonths(-1);
        competence = competenceRemove;
        await LoadDataMonth(competence);
    }
}