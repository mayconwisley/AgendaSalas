@inject IScheduleUserService scheduleUserService


@if (ScheduleUserDtos is not null)
{
    @foreach (var t in ScheduleUserDtos)
    {
        string dado = string.Empty;
        UserDtos.Clear();
        <a href="#" class="calenderUser">
            @foreach (var item in ScheduleUserDtos1)
            {

               @*  if (item.ScheduleDto!.Particular)
                {

                    UserDtos.Add($"{item.UserDto!.Name} - Particular");
                }
                else
                {
                    UserDtos.Add($"{item.UserDto!.Name}");
                }
                 *@
                
                
                @foreach (var i in item)
                {
                    if (i.ScheduleDto!.Particular)
                    {
                        
                        UserDtos.Add($"{i.UserDto!.Name} - Particular");
                    }
                    else
                    {
                        UserDtos.Add($"{i.UserDto!.Name}");
                    }
                }
            }
            @string.Join(",", UserDtos)
        </a>
    }
}


@code {
    [Parameter]
    public IEnumerable<ScheduleUserDto> ScheduleUserDtos { get; set; } = [];
    [Parameter]
    public DateTime CurrenteDate { get; set; }

    List<string> UserDtos { get; set; } = [];

    private List<IEnumerable<ScheduleUserDto>> ScheduleUserDtos1 { get; set; } = [];
    private IEnumerable<ScheduleUserDto> ScheduleUserDtos2 { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        var scheduleUserList = await Teste(ScheduleUserDtos);
        foreach (var item in scheduleUserList)
        {
            ScheduleUserDtos2 = await scheduleUserService.GetByScheduleId(item.ScheduleId);
            ScheduleUserDtos1.Add(await scheduleUserService.GetByScheduleId(item.ScheduleId));
        }
    }
    private Task<List<ScheduleUserDto>> Teste(IEnumerable<ScheduleUserDto> scheduleUserDtos)
    {
        var scheduleId = scheduleUserDtos
        .Where(w => w.ScheduleDto!.DateStart.Date == CurrenteDate.Date)
        .ToList();

        return Task.FromResult(scheduleId);
    }

}
