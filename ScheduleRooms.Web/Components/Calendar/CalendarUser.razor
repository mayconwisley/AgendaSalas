@inject IScheduleUserService scheduleUserService


@if (ScheduleUserDtos is not null)
{
    @for (int i = 0; i < ScheduleUserDtos.Count(); i++)
    {
        @if (ScheduleUserDtosList.Count() != 0)
        {
            string dado = string.Empty;

            UserDtos.Clear();
            <a href="#" class="calenderUser">
                @foreach (var item in ScheduleUserDtosList[i])
                {
                    @if (item.ScheduleDto!.Particular)
                    {
                        UserDtos.Add($"{item.UserDto!.Name} - Particular");
                    }
                    else
                    {
                        UserDtos.Add($"{item.UserDto!.Name}");
                    }
                }
                @string.Join(", ", UserDtos)
            </a>
        }
    }
}


@code {
    [Parameter]
    public IEnumerable<ScheduleUserDto> ScheduleUserDtos { get; set; } = [];
    [Parameter]
    public DateTime CurrenteDate { get; set; }

    List<string> UserDtos { get; set; } = [];
    private List<IEnumerable<ScheduleUserDto>> ScheduleUserDtosList { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        var scheduleUserList = await GetScheduleIdLists(ScheduleUserDtos);
        foreach (var item in scheduleUserList)
        {
            ScheduleUserDtosList.Add(await scheduleUserService.GetByScheduleId(item.ScheduleId));
        }
    }
    private Task<List<ScheduleUserDto>> GetScheduleIdLists(IEnumerable<ScheduleUserDto> scheduleUserDtos)
    {
        var scheduleId = scheduleUserDtos
        .Where(w => w.ScheduleDto!.DateStart.Date == CurrenteDate.Date)
        .ToList();

        return Task.FromResult(scheduleId);
    }

}
