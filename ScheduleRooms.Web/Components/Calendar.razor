@{
    DateTime dateStartMonth = new DateTime(competence.Year, competence.Month, 1);
    DateTime dateEndMonth = new DateTime(competence.Year, competence.Month, DateTime.DaysInMonth(competence.Year, competence.Month));
}
@inject IScheduleService scheduleService

<div class="calendario">
    <div class="desc-mes">
        <nav>
            <ul class="pagination">
                <li class="page-item">
                    <button class="page-link" @onclick="PreviousMonth">
                        <span aria-hidden="true">&laquo;</span>
                    </button>
                </li>
                <li class="page-item nome-mes"> <p class="page-link">@competence.ToString("MMMM/yyyy")</p></li>
                <li class="page-item">
                    <button class="page-link" @onclick="NextMonth">
                        <span aria-hidden="true">&raquo;</span>
                    </button>
                </li>
            </ul>
        </nav>
    </div>
    <div class="dia-semana">
        <span>Domingo</span>
        <span>Segunda-feira</span>
        <span>Terça-feira</span>
        <span>Quarta-feira</span>
        <span>Quinta-feira</span>
        <span>Sexta-feira</span>
        <span>Sábado</span>
    </div>
    <div class="centro-mes">


        <div class="dia-mes">
            @for (int i = 0; i < dateEndMonth.Day; i++)
            {
                int numWeek = ((int)dateStartMonth.AddDays(i).DayOfWeek);
                @if (@dateStartMonth.AddDays(i).Day == 1)
                {
                    @for (int y = 0; y < numWeek; y++)
                    {
                        <span class="vazio"></span>
                    }
                }
                <span class="@(numWeek == 0 ? "domingo dia" : (numWeek == 6 ? "sabado dia" : (dateStartMonth.AddDays(i).Date == DateTime.Now.Date ? "dia-atual dia" : "dia" )))">
                    <a href="#InsertAgenda/@(dateStartMonth.AddDays(i).Date.ToString("dd-MM-yyyy"))">
                        @dateStartMonth.AddDays(i).Day
                    </a>

                    @if (ScheduleDto is null)
                    {
                        <em>Carregando...</em>
                    }
                    else
                    {
                        var salaAgenda = ScheduleDto
                        .GroupBy(g => new
                        {
                            g.RoomId,
                            g.Room,
                            g.DateStart.Date
                        })
                        .Select(s => new ScheduleDto
                    {
                        RoomId = s.Key.RoomId,
                        Room = s.Key.Room,
                        DateStart = s.Key.Date
                    })
                        .ToList();

                        @foreach (var item in salaAgenda)
                        {
                            if (item.DateStart.Date == dateStartMonth.AddDays(i).Date)
                            {
                                <a href="#" data-bs-toggle="modal" data-bs-target="#tableSchedule-@item.RoomId-@dateStartMonth.AddDays(i).Date.ToString("ddMMyyyy")">
                                    @item.Room
                                </a>

                                <TableScheduleModal RoomId="@item.RoomId" DateSelected="@dateStartMonth.AddDays(i).Date" />
                            }
                        }
                    }
                </span>
            }
        </div>
    </div>
</div>



@code {

    DateTime competence = DateTime.Now.Date;

    public IEnumerable<ScheduleDto>? ScheduleDto { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ScheduleDto = await scheduleService.GetByAgendaActive();

        await base.OnInitializedAsync();
    }

    private void NextMonth()
    {
        DateTime competenceAdd = competence.AddMonths(1);
        competence = competenceAdd;

    }
    private void PreviousMonth()
    {
        DateTime competenceRemove = competence.AddMonths(-1);
        competence = competenceRemove;
    }


}
