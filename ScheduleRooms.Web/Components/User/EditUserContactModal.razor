@inject IUserContactService userContactService

<div class="modal fade" id="editContact-@UserContactDto.Id" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <EditForm Model="@UserContactDto" OnValidSubmit="@Edit">
                <InputNumber hidden @bind-Value="UserContactDto!.Id" />
                <DataAnnotationsValidator />

                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="staticBackdropLabel">Editar Colaborador</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="row g-3">
                        <div class="col-12">
                            <label for="inColaborador" class="form-label">Colaborador: </label>
                            <span>@UserId - @UserName</span>
                        </div>
                        <div class="col-6">
                            <label for="inType" class="form-label">Tipo</label>
                            <InputText class="form-control" id="inType" @bind-Value="UserContactCreateDto!.Type" placeholder="Tipo" />
                            <ValidationMessage For="@(() => UserContactCreateDto.Type)" />
                        </div>

                        <div class="col-6">
                            <label for="inNumber" class="form-label">Número</label>
                            <InputText class="form-control" id="inNumber" @bind-Value="UserContactCreateDto!.Number" placeholder="Número" />
                            <ValidationMessage For="@(() => UserContactCreateDto.Number)" />
                        </div>

                    </div>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-primary" data-bs-dismiss="modal">Salvar</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public EventCallback DataUpdated { get; set; }
    [Parameter]
    public int UserId { get; set; }
    [Parameter]
    public string? UserName { get; set; }

    private UserContactCreateDto? UserContactCreateDto { get; set; } = new();
    private UserContactDto? UserContactDto { get; set; } = new();
    private UserView? UserView { get; set; }
    protected override async Task OnInitializedAsync()
    {
        UserContactDto = await userContactService.GetById(UserId);
    }

    private async Task Edit()
    {

        UserContactCreateDto = new()
            {
                Id = UserContactDto.Id,
                Number = UserContactDto.Number,
                Type = UserContactDto.Type,
                UserId = UserContactDto.UserId
            };


        if (UserContactCreateDto is not null)
        {
            await userContactService.Update(UserContactCreateDto);
            await UpdateData();
        }
    }

    private async Task UpdateData()
    {
        await DataUpdated.InvokeAsync(null);
    }
}
